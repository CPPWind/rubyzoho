{"name":"Rubyzoho","tagline":"An ActiveRecord lifecycle style Ruby API for Zoho. With support for Rails and Devise.","body":"= rubyzoho\r\n{<img src=\"https://travis-ci.org/amalc/rubyzoho.png?branch=master\" alt=\"Build Status\" />}[https://travis-ci.org/amalc/rubyzoho] {<img src=\"https://gemnasium.com/amalc/rubyzoho.png\" alt=\"Dependency Status\" />}[https://gemnasium.com/amalc/rubyzoho] {<img src=\"https://codeclimate.com/github/amalc/rubyzoho.png\" />}[https://codeclimate.com/github/amalc/rubyzoho] {<img src=\"https://coveralls.io/repos/amalc/rubyzoho/badge.png?branch=master\" alt=\"Coverage Status\" />}[https://coveralls.io/r/amalc/rubyzoho] {<img src=\"https://badge.fury.io/rb/rubyzoho.png\" alt=\"Gem Version\" />}[http://badge.fury.io/rb/rubyzoho]\r\n\r\n\r\n\r\n\r\nAbstracting Zoho's API into a set of Ruby classes, with reflection of Zoho's fields using a more familiar\r\nActiveRecord lifecycle, but without ActiveRecord. Current focus is on Zoho CRM.\r\n\r\n<b>Release notes are at the \\end of this page.</b>\r\n\r\n== Install\r\n    gem install rubyzoho\r\n\r\n== Configure\r\n\r\n=== Rails\r\nPut the following in an initializer (e.g. <tt><RAILS_ROOT>/config/initializers/zoho.rb</tt>):\r\n\r\n    require 'ruby_zoho'\r\n\r\n    RubyZoho.configure do |config|\r\n      config.api_key = '<< API Key from Zoho>>'\r\n      # config.crm_modules = ['Accounts', 'Contacts', 'Leads', 'Potentials'] # Defaults to free edition if not set\r\n      # config.crm_modules = ['Quotes', 'SalesOrders', 'Invoices'] # Depending on what kind of account you've got, adds to free edition modules\r\n      # config.ignore_fields_with_bad_names = true # Ignores field with special characters in the name (Release 1.8)\r\n      # Currently only Quotes are supported\r\n    end\r\n\r\n=== Ruby\r\nMake sure the following block is executed prior to making calls to the gem.\r\n\r\n    require 'ruby_zoho'\r\n\r\n    RubyZoho.configure do |config|\r\n      config.api_key = '<< API Key from Zoho>>'\r\n      # config.crm_modules = ['Accounts', 'Contacts', 'Leads', 'Potentials'] # Defaults to free edition if not set\r\n      # config.crm_modules = ['Quotes', 'SalesOrders', 'Invoices'] # Depending on what kind of account you've got, adds to free edition modules\r\n      # config.ignore_fields_with_bad_names = true # Ignores field with special characters in the name (Release 1.8)\r\n      # Currently only Quotes are suported\r\n    end\r\n\r\nPlease be aware that Zoho limits API calls. So running tests repeatedly will quickly exhaust\r\nyour daily allowance. See below for some optimizations during development and testing.\r\n\r\n\r\n\r\n== Use\r\nRubyZoho attempts to follow the ActiveRecord lifecycle, i.e. new, save, update and delete.\r\nSee examples below. (<b>N.B. Fields _cannot_ have special characters in them.</b>)\r\n\r\nTo get a list of supported attributes for a Zoho CRM contact:\r\n\r\n    require 'ruby_zoho'\r\n\r\n    c = RubyZoho::Crm::Contact.new\r\n    c.attr_writers  # => List of updatable attributes\r\n    c.fields # => Array of all fields\r\n\r\nAttributes are reflected from the current API instance of Zoho, dynamically on\r\ninitialization of the API, when the RubyZoho.configure block is called. This\r\nincludes custom fields.\r\n\r\nAnother example:\r\n\r\n    l = RubyZoho::Crm::Lead.new\r\n    l.attr_writers  # => List of updatable attributes\r\n    l.fields # => Array of all fields\r\n\r\nTo retrieve an existing record:\r\n\r\n    l = RubyZoho::Crm::Lead.find_by_email('email@domain.com')\r\n\r\nReturns one or more records matching the query. The find_by_<attribute> follows\r\nActiveRecord style reflections, so if the attribute is present in the API, it can\r\nbe queried. There is currently a single attribute limitation imposed by the Zoho \r\nAPI. Note, what is returned is an Array class which is also Enumerable. Use +.each+,\r\n+.map+, +.first+, +.last+, etc to navigate through the result set.\r\n\r\nEquality is the only match currently supported.\r\n\r\nTo get a list of all accounts:\r\n\r\n    a = RubyZoho::Crm::Account.all\r\n    a.each do |account|\r\n      pp account.account_name\r\n    end\r\n\r\nOr for all task subjects:\r\n\r\n    t = RubyZoho::Crm::Task.all\r\n    pp t.collect { |task| task.subject }  # => ['Subject 1'], ['Subject 2'], ... ['Subject n']\r\n\r\nOr for all quotes:\r\n\r\n    q = RubyZoho::Crm::Quote.all\r\n    q.each do |quote|\r\n      pp quote.subject\r\n      pp quote.quote_name\r\n    end\r\n\r\nTo get the first quote:\r\n    q.first\r\n\r\nOr the last one:\r\n    q.last\r\n\r\nSince the result is Enumerable:\r\n    q.map { |m| m.last_name }\r\nworks.\r\n\r\nTo sort a result set:\r\n    r = RubyZoho::Crm::Contact.all\r\n    sorted =  r.sort {|a, b| a.last_name <=> b.last_name }\r\n    pp sorted.collect { |c| c.last_name }  # => ['Name 1', ['Name 2'], ... ['Name n']]\r\n\r\nTo find by ID, note well, ID is a *string*:\r\n    leads = RubyZoho::Crm::Lead.all\r\n    l = RubyZoho::Crm::Lead.find_by_leadid(leads.last.leadid)\r\n\r\nTo create a new record:\r\n\r\n    c = RubyZoho::Crm::Contact.new(\r\n      :first_name => 'First Name',\r\n      :last_name => 'Last Name',\r\n      :email => 'email@domain.com',\r\n      etc.\r\n    )\r\n    c.save\r\n    r = RubyZoho::Crm::Contact.find_by_email('email@domain.com')\r\n    r.first.contactid # => Has the newly created contact's ID\r\n\r\n\r\nTo add a contact to an existing account:\r\n\r\n    a = RubyZoho::Crm::Account.find_by_account_name('Very Big Account')\r\n    c = RubyZoho::Crm::Contact.new(\r\n      :first_name => 'First Name',\r\n      :last_name => 'Last Name',\r\n      :email => 'email@domain.com',\r\n      :account_name => a.first.account_name,\r\n      :accountid => a.first.accountid  # accountid instead of account_id because of Zoho's convention\r\n      etc.\r\n    )\r\n    c.save\r\n\r\nTo update a record (<b>Note, that the attribute is :id</b>):\r\n    l = RubyZoho::Crm::Lead.find_by_email('email@domain.com')\r\n    RubyZoho::Crm::Lead.update(\r\n        :id => l.first.leadid,\r\n        :email => 'changed_email@domain.com'\r\n    )\r\n\r\nCustom fields are like any other field or method in Ruby:\r\n    a = RubyZoho::Crm::Account.find_by_account_name('Very Big Account')\r\n    pp a.custom_field # => 'Custom field content'\r\n\r\nOr:\r\n    c = RubyZoho::Crm::Contact.new(\r\n      :first_name => 'First Name',\r\n      :last_name => 'Last Name',\r\n      :email => 'email@domain.com',\r\n      :account_name => a.first.account_name,\r\n      :accountid => a.first.accountid,  # accountid instead of account_id because of Zoho's convention\r\n      :custom_field_2 => 'Custom text'\r\n    )\r\n    pp c.save   # Reflects back the new Zoho record ID, and various create and modify times and users\r\n\r\nTo attach a file to a record (Tested for +Accounts+, +Contacts+, +Leads+, +Potentials+ and +Tasks+ only):\r\n    l = RubyZoho::Crm::Lead.find_by_email('email@domain.com')\r\n    l.attach_file(file_path, file_name)     # Can only be attached to a pre-existing record\r\n\r\nClasses (Zoho modules) currently supported are:\r\n    RubyZoho::Crm::Account\r\n    RubyZoho::Crm::Contact\r\n    RubyZoho::Crm::Lead\r\n    RubyZoho::Crm::Potential\r\n    RubyZoho::Crm::Task\r\n    RubyZoho::Crm::Quote\r\n    RubyZoho::Crm::User\r\n\r\n== Error Handling\r\nErrors, i.e. situations where the Zoho API either returns an http code something other than 200\r\nor where the Zoho API sends back an explicit error code which <b>isn't</b> in the set\r\n\r\n    ['4422', '5000']\r\n\r\na standard Ruby +RuntimeError+ exception is raised with the Zoho's API message.\r\n\r\n== Optimizations for Development and Testing\r\nSet <tt>config.cache_fields = true</tt> in the configuration block. This caches \\module field\r\nlists and is useful during development and testing, to reduce total API calls during start up.\r\nDefaults to false. We <b>do not</b> recommend use of this in production. The gem will need\r\nwrite access to its own directory for this to work.\r\n\r\n    RubyZoho.configure do |config|\r\n      # Other stuff for initialization\r\n      config.cache_fields = true\r\n    end\r\n\r\n== Idiosyncractic Behavior\r\n    From freedictionary.com\r\n    id·i·o·syn·cra·sy ( d - -s ng kr -s ). n. pl. id·i·o·syn·cra·sies.\r\n    1. A structural or behavioral characteristic peculiar to an individual or group.\r\n\r\n\r\nThe Zoho API is definitely opinionated. And we have yet to be able plumb the depths of its\r\nviews. If it behaves unexpectedly, try the Zoho forums before opening an issue here. It\r\njust may be the way the API works...\r\n\r\nAn example of this is retrieving related records. You would think that since a Task can\r\nbe related to an Account or a Potential etc. that you should be able to retrieve it by\r\neither the related \\module's record id, which is stored with the Task. But no, can't be done.\r\n\r\n== Bugs and Enhancements\r\nPlease open an issue on GitHub. Or better yet, send in a pull request with the fix or enhancement!\r\n\r\n=== Known Bugs or Issues\r\n1. If you're having trouble with updating custom fields, be sure to check the permission of the user that created the custom field.\r\n\r\n=== Roadmap (Ranked)\r\n1. AR style master/detail updates e.g. where +a+ is an account.\r\n    a << RubyZoho::Crm::Contact.new(\r\n        :last_name => 'Last Name',\r\n        :first_name => 'First Name'\r\n    )\r\n2. Get related records using AR style syntax, e.g.\r\n        pp a.contacts\r\n   to get contacts associated with an account.\r\n3. Support for multiple find fields.\r\n\r\n== Contributing to rubyzoho\r\n* Pull requests with unit tests or specs and a version branch are welcomed.\r\n* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet.\r\n* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it.\r\n* Fork the project.\r\n* Start a feature/bugfix branch.\r\n* Commit and push until you are happy with your contribution.\r\n* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.\r\n* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.\r\n\r\n---\r\n== Acknowledgements\r\nGiant buckets of Gratitude to the giants, sung and unsung heroes who put together and support the Open Source movement,\r\nLinux, Ruby and Rails. We stand on the shoulders of giants. Thank you.\r\n\r\n== Credits and Contributions\r\nThanks to a growing and wonderful community!\r\n@aeldaly\r\n@fheemeyer\r\n@qume\r\n@tjsousa\r\n@wcgiles\r\n\r\nDrop me a line if I've left anybody out and my advance apologies.\r\n\r\n== Trademarks\r\nZoho, the Zoho suite and related applications are owned, trademarked and copyrighted by the Zoho Corporation Pvt. Ltd.\r\nThis software is not associated in anyway with the Zoho Corporation Pvt. Ltd.\r\n\r\n== Copyright\r\nCopyright (c) 2013 amalc (\\@\\amalc). Released under the MIT license. See LICENSE.txt for further details.\r\n\r\n---\r\n= Releases\r\n== Release Candidates (Uses {Semantic Versioning}[http://semver.org/])\r\n\r\n== Development\r\n[0.1.12]\r\n        1. Modules Supported: Accounts, Contacts, Leads, Potentials, Quotes, Tasks and Users\r\n        2. ActiveRecord style syntax for Class.\\new, Class.delete, Class.find, Class.update, Object.save\r\n        3. << syntax for Account/Tasks on Master/Detail relationships\r\n        4. Option in config to ignore fields with improper field names\r\n\r\n== Released\r\n[0.1.11]\r\n        1. Incorporate fix to namespace collision between Devise and RubyZoho, User renamed to CRMUser thanks to @qume.\r\n        2. Other fixes from  @tjsousa, @aeldaly and @fheemeyer.\r\n        3. Refactor of the code base to improve modularization and test coverage.\r\n[0.1.8 - 0.1.10]\r\n        Various forks out in the community so bumped the release number to 0.1.11 prevent confusion.\r\n[0.1.7]\r\n        1. Bug for attach_file method, respect the file_name parameter.\r\n        2. \\:\\id is the primary key across all Zoho related classes (modules) in addition to Zoho's existing convention.\r\n\r\n[0.1.1 - 0.1.6] Alpha Releases\r\n                1. Configuration block signature changed\r\n[0.0.1 - 0.0.5] Alpha Releases\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}